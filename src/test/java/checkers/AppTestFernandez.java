/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package checkers;

import checkers.bot.fenandezprudencioversion3.ChildBoard;
import checkers.bot.fenandezprudencioversion3.FernandezPrudencioBot3;
import checkers.exception.BadMoveException;
import org.junit.Test;

import java.util.LinkedList;
import java.util.Optional;
import java.util.stream.Stream;

import static org.junit.Assert.*;

public class AppTestFernandez {

    @Test
    public void succesorsTest() throws BadMoveException {
        FernandezPrudencioBot3 player3 = new FernandezPrudencioBot3();
        CheckersBoard initBoard = CheckersBoard.initBoard();
        ChildBoard rootBoard = new ChildBoard(initBoard);
        rootBoard.successors(3);
        rootBoard.childrenBoards.forEach(n -> n.board.printBoard());
        rootBoard.childrenBoards.get(0).childrenBoards.forEach(n -> n.board.printBoard());
        rootBoard.childrenBoards.get(0).childrenBoards.get(0).childrenBoards.forEach(n -> n.board.printBoard());
    }



/*
    @Test
    public void whatIsTheInitialPlayerOops() throws BadMoveException {
        FernandezPrudencioBot player3 = new FernandezPrudencioBot();
        CheckersBoard initBoard = CheckersBoard.initBoard();
        NodeBoard rootBoard = new NodeBoard(initBoard);
        //rootBoard.board.printBoard();
        //System.out.println("Initial player: "+rootBoard.initialPlayer);
        LinkedList<NodeBoard> s = new LinkedList<NodeBoard>(player3.successors(rootBoard));
        //s.forEach(ss -> System.out.println("Initial player: "+ss.initialPlayer));
        LinkedList<NodeBoard> s2 = new LinkedList<NodeBoard>(player3.successors(s.removeFirst()));
        //s2.forEach(ss -> System.out.println("Initial player: "+ss.initialPlayer));
        LinkedList<NodeBoard> s3 = new LinkedList<NodeBoard>(player3.successors(s2.removeFirst()));
        //s3.forEach(ss -> System.out.println("Initial player: "+ss.initialPlayer));
        LinkedList<NodeBoard> s4 = new LinkedList<NodeBoard>(player3.successors(s3.removeFirst()));
        //s4.forEach(ss -> System.out.println("Initial player: "+ss.initialPlayer));
        LinkedList<NodeBoard> s5 = new LinkedList<NodeBoard>(player3.successors(s4.removeFirst()));
        //s5.forEach(ss -> System.out.println("Initial player: "+ss.initialPlayer));
        LinkedList<NodeBoard> s6 = new LinkedList<NodeBoard>(player3.successors(s5.removeFirst()));
        //s6.forEach(ss -> System.out.println("Initial player: "+ss.initialPlayer));
        LinkedList<NodeBoard> s7 = new LinkedList<NodeBoard>(player3.successors(s6.removeFirst()));
        LinkedList<NodeBoard> s8 = new LinkedList<NodeBoard>(player3.successors(s7.removeFirst()));
        LinkedList<NodeBoard> s9 = new LinkedList<NodeBoard>(player3.successors(s8.removeFirst()));
        LinkedList<NodeBoard> s10 = new LinkedList<NodeBoard>(player3.successors(s9.removeFirst()));
        LinkedList<NodeBoard> s11 = new LinkedList<NodeBoard>(player3.successors(s10.removeFirst()));
        LinkedList<NodeBoard> s12 = new LinkedList<NodeBoard>(player3.successors(s11.removeFirst()));
        LinkedList<NodeBoard> s13 = new LinkedList<NodeBoard>(player3.successors(s12.removeFirst()));

        for (NodeBoard n: s13){
            System.out.println(n.accumulatedUtility);
            n.board.printBoard();
        }
        LinkedList<NodeBoard> s14 = player3.ordenar(s13);

        for (NodeBoard n: s14){
            System.out.println(n.accumulatedUtility);
        }
    }
*/
    /*
    @Test

    public void moveDoneinCheckingAllMoves() throws BadMoveException {
        FernandezPrudencioBot player3 = new FernandezPrudencioBot();
        CheckersBoard initBoard = CheckersBoard.initBoard();
        NodeBoard rootBoard = new NodeBoard(initBoard);
        LinkedList<NodeBoard> s = new LinkedList<NodeBoard>(player3.successors(rootBoard));
        LinkedList<NodeBoard> s2 = new LinkedList<NodeBoard>(player3.successors(s.removeFirst()));
        LinkedList<NodeBoard> s3 = new LinkedList<NodeBoard>(player3.successors(s2.removeFirst()));

        //System.out.println(s3.getFirst().getMoveDone().getEndCol() +" "+s3.getFirst().getMoveDone().getEndRow());
    }
*/
}
