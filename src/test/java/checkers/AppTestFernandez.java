/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package checkers;

import checkers.bot.fernandezprudencio.*;
import checkers.bot.gray.GrayRandomBot;
import checkers.exception.BadMoveException;
import org.junit.Test;

import java.util.LinkedList;
import java.util.Optional;
import java.util.stream.Stream;

import static org.junit.Assert.*;

public class AppTestFernandez {
    @Test
    public void cloneTest() {
        CheckersBoard initBoard = CheckersBoard.initBoard();
        CheckersBoard clone = initBoard.clone();
        assertEquals(initBoard, clone);
        try {
            clone.processMove(clone.possibleMoves().get(0));
        } catch (BadMoveException e) {
            fail(e.getMessage());
        }
        assertNotEquals(initBoard, clone);
    }

    @Test
    public void countPiecesTest() {
        CheckersBoard initBoard = CheckersBoard.initBoard();
        assertEquals(12, initBoard.countPiecesOfPlayer(CheckersBoard.Player.BLACK));
        assertEquals(12, initBoard.countPiecesOfPlayer(CheckersBoard.Player.RED));
    }

    @Test
    public void moveTest() {
        CheckersBoard initBoard = CheckersBoard.initBoard();
        try {
            initBoard.processMove(CheckersMove.builder().fromPosition(2, 1).toPosition(3, 0).build());
        } catch (BadMoveException ex) {
            assertEquals("You must move YOUR pieces!", ex.getMessage());
        }
        try {
            initBoard.processMove(CheckersMove.builder().fromPosition(5, 0).toPosition(-1, 4).build());
        } catch (BadMoveException ex) {
            assertEquals("All coordinates must be between [0-7]!", ex.getMessage());
        }
        try {
            initBoard.processMove(CheckersMove.builder().fromPosition(6, 1).toPosition(5, 0).build());
        } catch (BadMoveException ex) {
            assertEquals("You can only move into empty spaces!", ex.getMessage());
        }
        try {
            initBoard.processMove(CheckersMove.builder().fromPosition(5, 2).toPosition(3, 4).build());
        } catch (BadMoveException ex) {
            assertEquals("You can only capture your opponent's pieces!", ex.getMessage());
        }
        try {
            initBoard.processMove(CheckersMove.builder().fromPosition(5, 0).toPosition(3, 6).build());
            fail("An invalid move was accepted!");
        } catch (BadMoveException ex) {
            assertEquals("You can only move 1 space away, or capture 2 spaces away!", ex.getMessage());
        }
    }
    //Successful till now
    @Test
    public void successorsTest() throws BadMoveException {
        FernandezPrudencioBot player3 = new FernandezPrudencioBot();
        CheckersBoard initBoard = CheckersBoard.initBoard();
        NodeBoard rootBoard = new NodeBoard(initBoard);
        //rootBoard.board.printBoard();
        LinkedList<NodeBoard> s = new LinkedList<NodeBoard>(player3.successors(rootBoard));
        //s.forEach(ss -> ss.board.printBoard());
        for (NodeBoard n: s) {
            LinkedList<NodeBoard> s2 = new LinkedList<NodeBoard>(player3.successors(n));
            //s2.forEach(ss -> ss.board.printBoard());
        }
    }
    @Test
    public void whatIsTheInitialPlayerOops() throws BadMoveException {
        FernandezPrudencioBot player3 = new FernandezPrudencioBot();
        CheckersBoard initBoard = CheckersBoard.initBoard();
        NodeBoard rootBoard = new NodeBoard(initBoard);
        //rootBoard.board.printBoard();
        //System.out.println("Initial player: "+rootBoard.initialPlayer);
        LinkedList<NodeBoard> s = new LinkedList<NodeBoard>(player3.successors(rootBoard));
        //s.forEach(ss -> System.out.println("Initial player: "+ss.initialPlayer));
        LinkedList<NodeBoard> s2 = new LinkedList<NodeBoard>(player3.successors(s.removeFirst()));
        //s2.forEach(ss -> System.out.println("Initial player: "+ss.initialPlayer));
        LinkedList<NodeBoard> s3 = new LinkedList<NodeBoard>(player3.successors(s2.removeFirst()));
        //s3.forEach(ss -> System.out.println("Initial player: "+ss.initialPlayer));
        LinkedList<NodeBoard> s4 = new LinkedList<NodeBoard>(player3.successors(s3.removeFirst()));
        //s4.forEach(ss -> System.out.println("Initial player: "+ss.initialPlayer));
        LinkedList<NodeBoard> s5 = new LinkedList<NodeBoard>(player3.successors(s4.removeFirst()));
        //s5.forEach(ss -> System.out.println("Initial player: "+ss.initialPlayer));
        LinkedList<NodeBoard> s6 = new LinkedList<NodeBoard>(player3.successors(s5.removeFirst()));
        //s6.forEach(ss -> System.out.println("Initial player: "+ss.initialPlayer));
        LinkedList<NodeBoard> s7 = new LinkedList<NodeBoard>(player3.successors(s6.removeFirst()));
        LinkedList<NodeBoard> s8 = new LinkedList<NodeBoard>(player3.successors(s7.removeFirst()));
        LinkedList<NodeBoard> s9 = new LinkedList<NodeBoard>(player3.successors(s8.removeFirst()));
        LinkedList<NodeBoard> s10 = new LinkedList<NodeBoard>(player3.successors(s9.removeFirst()));
        LinkedList<NodeBoard> s11 = new LinkedList<NodeBoard>(player3.successors(s10.removeFirst()));
        LinkedList<NodeBoard> s12 = new LinkedList<NodeBoard>(player3.successors(s11.removeFirst()));
        LinkedList<NodeBoard> s13 = new LinkedList<NodeBoard>(player3.successors(s12.removeFirst()));

        for (NodeBoard n: s13){
            System.out.println(n.accumulatedUtility);
            n.board.printBoard();
        }
        LinkedList<NodeBoard> s14 = player3.ordenar(s13);

        for (NodeBoard n: s14){
            System.out.println(n.accumulatedUtility);
        }
    }

    @Test

    public void moveDoneinCheckingAllMoves() throws BadMoveException {
        FernandezPrudencioBot player3 = new FernandezPrudencioBot();
        CheckersBoard initBoard = CheckersBoard.initBoard();
        NodeBoard rootBoard = new NodeBoard(initBoard);
        LinkedList<NodeBoard> s = new LinkedList<NodeBoard>(player3.successors(rootBoard));
        LinkedList<NodeBoard> s2 = new LinkedList<NodeBoard>(player3.successors(s.removeFirst()));
        LinkedList<NodeBoard> s3 = new LinkedList<NodeBoard>(player3.successors(s2.removeFirst()));

        //System.out.println(s3.getFirst().getMoveDone().getEndCol() +" "+s3.getFirst().getMoveDone().getEndRow());
    }

    public void gameTest() {
        CheckersBoard board = CheckersBoard.initBoard();
        Stream.of(//
                CheckersMove.builder().fromPosition(5,6).toPosition(4,5).build(),//
                CheckersMove.builder().fromPosition(2,3).toPosition(3,4).build(),//
                CheckersMove.builder().fromPosition(4,5).toPosition(2,3).build(),//
                CheckersMove.builder().fromPosition(1,4).toPosition(3,2).build(),//
                CheckersMove.builder().fromPosition(6,7).toPosition(5,6).build(),//
                CheckersMove.builder().fromPosition(2,7).toPosition(3,6).build(),//
                CheckersMove.builder().fromPosition(5,2).toPosition(4,1).build(),//
                CheckersMove.builder().fromPosition(0,3).toPosition(1,4).build(),//
                CheckersMove.builder().fromPosition(4,1).toPosition(2,3).build(),//
                CheckersMove.builder().fromPosition(1,4).toPosition(3,2).build(),//
                CheckersMove.builder().fromPosition(7,6).toPosition(6,7).build(),//
                CheckersMove.builder().fromPosition(3,2).toPosition(4,1).build(),//
                CheckersMove.builder().fromPosition(5,0).toPosition(3,2).build(),//
                CheckersMove.builder().fromPosition(2,1).toPosition(4,3).build(),//
                CheckersMove.builder().fromPosition(5,4).toPosition(3,2).build(),//
                CheckersMove.builder().fromPosition(1,2).toPosition(2,1).build(),//
                CheckersMove.builder().fromPosition(6,1).toPosition(5,0).build(),//
                CheckersMove.builder().fromPosition(2,1).toPosition(4,3).build(),//
                CheckersMove.builder().fromPosition(6,3).toPosition(5,4).build(),//
                CheckersMove.builder().fromPosition(1,0).toPosition(2,1).build(),//
                CheckersMove.builder().fromPosition(5,4).toPosition(3,2).build(),//
                CheckersMove.builder().fromPosition(3,2).toPosition(1,0).build(),//
                CheckersMove.builder().fromPosition(0,1).toPosition(1,2).build(),//
                CheckersMove.builder().fromPosition(6,5).toPosition(5,4).build(),//
                CheckersMove.builder().fromPosition(3,6).toPosition(4,7).build(),//
                CheckersMove.builder().fromPosition(5,4).toPosition(4,3).build(),//
                CheckersMove.builder().fromPosition(4,7).toPosition(6,5).build(),//
                CheckersMove.builder().fromPosition(7,4).toPosition(5,6).build(),//
                CheckersMove.builder().fromPosition(2,5).toPosition(3,4).build(),//
                CheckersMove.builder().fromPosition(4,3).toPosition(2,5).build(),//
                CheckersMove.builder().fromPosition(1,6).toPosition(3,4).build(),//
                CheckersMove.builder().fromPosition(7,2).toPosition(6,1).build(),//
                CheckersMove.builder().fromPosition(3,4).toPosition(4,5).build(),//
                CheckersMove.builder().fromPosition(5,6).toPosition(3,4).build(),//
                CheckersMove.builder().fromPosition(1,2).toPosition(2,1).build(),//
                CheckersMove.builder().fromPosition(3,4).toPosition(2,5).build(),//
                CheckersMove.builder().fromPosition(0,7).toPosition(1,6).build(),//
                CheckersMove.builder().fromPosition(2,5).toPosition(0,7).build(),//
                CheckersMove.builder().fromPosition(2,1).toPosition(3,2).build(),//
                CheckersMove.builder().fromPosition(6,7).toPosition(5,6).build(),//
                CheckersMove.builder().fromPosition(0,5).toPosition(1,4).build(),//
                CheckersMove.builder().fromPosition(0,7).toPosition(1,6).build(),//
                CheckersMove.builder().fromPosition(3,2).toPosition(4,1).build(),//
                CheckersMove.builder().fromPosition(5,0).toPosition(3,2).build(),//
                CheckersMove.builder().fromPosition(1,4).toPosition(2,3).build(),//
                CheckersMove.builder().fromPosition(3,2).toPosition(1,4).build()//
        ).forEach(move -> {//
            try {
                board.processMove(move);
            } catch (BadMoveException e) {
                board.printBoard();
                fail(e.getMessage());
            }
        });
        board.printBoard();
    }


}
